函数
作用：解决某些特定功能的特定代码块
理论上要求：如果某些代码或者功能需要使用2次以上，建议封装为函数
分类
系统预定义函数
Var_dump() isset() unset() define() defined() empty() is_bool() is_int() is_float()
用户自定义函数
系统本身没有的功能，需要用户自己实现
建议：如果有系统函数，尽量使用系统的函数，而不要自己去定义
定义格式：
Function 函数名 (参数1, 参数2，参数N) {
	函数体
}
命名规则
1，小驼峰
2，可以使用字母，数字，下划线
3，数字不能开头
4，下划线开头慎用
5，命名要有意义
6，函数名使用时不区分大小写，但是尽可能的一致
7,函数不能重复定义，和常量一样

形参&实参
形参：定义函数的时候，给的参数，就是形参
实参：调用函数的时候，实际参与运算的参数就是实参
形参，实参归根结底都是变量


变量的范围
分类
局部变量
函数内部定义的变量
全局变量
函数外部定义的变量
注意：默认情况下，局部变量不能调用全局变量，全局变量也不能调用局部变量
因为，函数执行的时候会进入额外的空间，和全局空间不在一个层面上，好比副本内，和副本外

全局使用局部变量的方法
使用返回值的方式
Return
注意：return返回函数内的东西，在函数外部需要接收，怎么接收，变量接收
Return的特点：
1.一个函数当中，只能有一个return生效
return之后，退出函数空间，return后续的代码不会执行

既然return可以返回函数内的东西，能否返回局部变量？可以的

局部想调用全局的该怎么写？
默认，局部不能调用全局

方法有2个：
1，传值

2，使用global关键字
注意：使用global关键字之后，相当于局部变量是全局变量的引用赋值，也就说：局部或者全局对值的修改会影响到别的变量

实参&形参数目的问题
默认情况下，使用函数的时候，参数必须一一对应

实参=形参
默认情况，不讨论
实参>形参
结论：只取形参数目的实参，并且和形参一一对应，其余的多的实参，丢弃不管

实参<形参
默认，报错。参数丢失

能否不报错呢？可以。
使用默认值

注意：
如果要给函数的参数默认值，那么要注意：使用默认值的参数统一往后放。因为参数的对应关系是从左到右一一对应
实参不固定
func_num_args():返回实参的数目
func_get_args()：返回实参的列表，返回值是数组
func_get_arg()：返回某个实参

可变函数
可变变量：有多个$符号的变量就是可变变量
可变函数呢？
就是形式是：变量名() 这种方式的函数就是可变函数。
也就是说：执行哪个函数，与变量名对应的值有关

可变函数的简单小示例：计算器，详见：jisuanqi.html  和jisuanqi.php


静态变量
注意：函数执行完成后，在退出空间的那一刻，内部定义的变量会全部销毁，下次再使用的时候，再重新定义

能否让变量保存下来，不被销毁？可以啊。静态变量
格式：
就是在局部变量的前面加一个关键词 static
作用：
在函数执行完成后，退出空间时，把静态变量的值保留，不再销毁，留着下次继续用

原理：第一次使用的时候，存起来，后续使用时，先看有没有存，有，直接拿着用，没有，当作第一次，存起来
函数能不能先调用，后声明？
变量好使不？不行
常量？不写
函数呢？可以


虽然看上去函数是先调用，后声明的，但是别忘了：php是解释型语言，也就是说：在你执行之前，本身已经解释过了，他已经知道你有这个函数了，所以可以执行。本质上，还是先声明，后调用的